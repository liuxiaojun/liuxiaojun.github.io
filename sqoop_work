<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->


Sqoop是用Java语言编写的。Java提供了一个JDBC的API，应用程序可以使用这个API来访问存储在RDBMS中的数据以及检查数据的性质和类型。

在开始导入之前,Sqoop使用JDBC来检查将要导入的表。它检索出表中所有的列以及列的SQL数据类型。这些SQL类型(varchar,integer等)被映射到Java数据类型（String/Integer等），在MapReduce应用中将使用这些对应的Java类型来保存字段的值。Sqoop的代码生成器使用这些信息来创建对应的表，用于保存从表中抽取的记录。

例如，之前提到的widget类包含下列防范，这些方法用于从抽取的记录中检索所有的列:
public Interger get_id();
public String get_widget_name();
public java.math.BigDecimal get_price();
public java.sql.Date get_version();
public String get_design_comment();


不过，对于导入来说，更关键的是DBWritable接口的序列化方法，这些方法能使Widget类和JDBC进行交互：
public void readFields(ResultSet __dbResults) throws SQLException;
public void write(PreparedStatement __dbStmt) throws SQLException;

JDBC的ResultSet接口提供了一个用于从检查结果中检索记录的游标；这里的readFields()方法将用ResultSet中一行数据的列来填充Widget对象的字段。前面的write()方法允许Sqoop将新的widget行插入表，这个过程称为导出。

Sqoop启动的MapReduce作业用到一个InputFormat，它可以通过JDBC从一个数据库表中读取部分内容。Hadoop提供的DataDrivenInputFormat能够为几个Map任务对查询结果进行划分。

使用一个简单的查询通常就可以读取一张表的内容，例如：
select col1,col2,col3 from tablename

但是，为了获得更好的导入性能，人们经常将这样的查询划分到多个节点上执行。查询是根据一个“划分列”来进行划分的。根据表的元数据，Sqoop会选择一个合适的列作为划分列(通常是表的主键)。主键列中最大值和最小值会被读出，与目标任务一起来确定每个map任务要执行的查询。
例如，widget表中有100 000条记录，其id列的值为0 - 99 999 ，在导入这张表的时候，sqoop会判断出id是表的主键列。启动mapreduce作业时，用来执行导入的DataDrivenDBInputFormat便会发出一条类似SELECT MIN(id) ,MAX(id) FROM widget 的查询语句。检索出的数据将用于对整个数据集进行划分任务要执行的查询分别为 where id>0 and id < 2000, where id>2000 and id < 4000,,...。
划分列的选择是影响并行执行效率的重要因素。
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>Sqoop是用Java语言编写的。Java提供了一个JDBC的API，应用程序可以使用这个API来访问存储在RDBMS中的数据以及检查数据的性质和类型。</p>

<p>在开始导入之前,Sqoop使用JDBC来检查将要导入的表。它检索出表中所有的列以及列的SQL数据类型。这些SQL类型(varchar,integer等)被映射到Java数据类型（String/Integer等），在MapReduce应用中将使用这些对应的Java类型来保存字段的值。Sqoop的代码生成器使用这些信息来创建对应的表，用于保存从表中抽取的记录。</p>

<p>例如，之前提到的widget类包含下列防范，这些方法用于从抽取的记录中检索所有的列:
public Interger get<em>id();
public String get</em>widget<em>name();
public java.math.BigDecimal get</em>price();
public java.sql.Date get<em>version();
public String get</em>design_comment();</p>

<p>不过，对于导入来说，更关键的是DBWritable接口的序列化方法，这些方法能使Widget类和JDBC进行交互：
public void readFields(ResultSet <em>_dbResults) throws SQLException;
public void write(PreparedStatement _</em>dbStmt) throws SQLException;</p>

<p>JDBC的ResultSet接口提供了一个用于从检查结果中检索记录的游标；这里的readFields()方法将用ResultSet中一行数据的列来填充Widget对象的字段。前面的write()方法允许Sqoop将新的widget行插入表，这个过程称为导出。</p>

<p>Sqoop启动的MapReduce作业用到一个InputFormat，它可以通过JDBC从一个数据库表中读取部分内容。Hadoop提供的DataDrivenInputFormat能够为几个Map任务对查询结果进行划分。</p>

<p>使用一个简单的查询通常就可以读取一张表的内容，例如：
select col1,col2,col3 from tablename</p>

<p>但是，为了获得更好的导入性能，人们经常将这样的查询划分到多个节点上执行。查询是根据一个“划分列”来进行划分的。根据表的元数据，Sqoop会选择一个合适的列作为划分列(通常是表的主键)。主键列中最大值和最小值会被读出，与目标任务一起来确定每个map任务要执行的查询。
例如，widget表中有100 000条记录，其id列的值为0 - 99 999 ，在导入这张表的时候，sqoop会判断出id是表的主键列。启动mapreduce作业时，用来执行导入的DataDrivenDBInputFormat便会发出一条类似SELECT MIN(id) ,MAX(id) FROM widget 的查询语句。检索出的数据将用于对整个数据集进行划分任务要执行的查询分别为 where id&gt;0 and id &lt; 2000, where id&gt;2000 and id &lt; 4000,,...。
划分列的选择是影响并行执行效率的重要因素。</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "sqoop_work";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
